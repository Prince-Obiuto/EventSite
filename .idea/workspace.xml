<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="71e1af24-cec7-4b54-8077-805738bb3606" name="Changes" comment="This diff introduces substantial improvements to file handling and response generation in your HTTP server.  It shifts from a hardcoded HTML page to serving files from a webroot directory and implements proper MIME type handling. The webroot is now relative to the project directory for portability.  Error handling is also more robust.  Let's break down the changes:&#10;&#10;**Key Changes:**&#10;&#10;* **Relative Webroot:** The most significant change is using a *relative* webroot path (&quot;WebRoot&quot;) instead of an absolute path. This makes your server portable and avoids hardcoding file system dependencies. The server now looks for the &quot;WebRoot&quot; directory within its execution context.&#10;&#10;* **Dynamic Content Serving:** The server now dynamically serves files from the webroot directory. The hardcoded HTML in `HTTPConnectionWorkerThread` is replaced with logic to read and serve requested files.  This allows you to host various file types (HTML, images, etc.). A default &quot;index.html&quot; is served if the request targets a directory.&#10;&#10;* **Robust MIME Type Handling:**  `WebRootHandler.getFileMimeType` now correctly determines the MIME type of requested files using `URLConnection.getFileNameMap()`. It defaults to &quot;application/octet-stream&quot; for unknown file types, which is standard practice.  This ensures browsers interpret the content correctly.&#10;&#10;* **Binary File Serving:** The `WebRootHandler` can now read and serve binary files.  `getFileByteArrayData` reads file contents into a byte array, suitable for sending binary data in HTTP responses.  This enables serving images, PDFs, and other non-text files. Note: this current implementation reads the entire file into memory, which isn't ideal for very large files.  Consider streaming for better memory management in the future.&#10;&#10;* **Improved Error Handling:**  A new `ReadFileException` is introduced to specifically handle errors encountered during file reading.  This provides better granularity than generic exceptions.  `HTTPConnectionWorkerThread` now catches and handles `FileNotFoundException` and `ReadFileException`, sending appropriate 404 responses.&#10;&#10;* **Status Code Consistency:** `HTTPConnectionWorkerThread` now consistently uses `HTTPStatusCodes` constants for HTTP status codes, making the code more readable and maintainable.&#10;&#10;* **Code Cleanup:**  Changes like making `myObjectMapper` `final` in `Json.java` and renaming methods and fields (e.g., `webroot` to `webRoot` for consistency) improve code style and readability.  The `checkifEndsWithSlash` method in `WebRootHandler` is renamed to `checkIfEndsWithSlash` for standard Java naming conventions.  `http.json` is simplified by removing unnecessary escaping of backslashes and now also uses `webRoot`.&#10;&#10;&#10;&#10;**Detailed File Changes and Improvements:**&#10;&#10;* **`HTTPConnectionWorkerThread.java`:**  Now dynamically builds HTTP responses based on the requested file. Handles `FileNotFoundException` and `ReadFileException` to send 404 errors. Uses `HTTPStatusCodes` for status codes.  Sends `Content-Type` header based on the determined MIME type. Sends binary data when appropriate.&#10;&#10;* **`ServerListenerThread.java`:** Minor changes to pass the webroot path.&#10;&#10;* **`HTTPStatusCodes.java`:**  A new success code `SERVER_SUCCESS_200_OK` is added, promoting better code readability.&#10;&#10;* **`http.json`:** Uses relative path &quot;WebRoot&quot;.&#10;&#10;* **`workspace.xml`:**  Reflects project changes and added a Run Configuration to execute the `HttpServer` class.&#10;&#10;* **`Json.java`:**  `myObjectMapper` is now `final`.&#10;&#10;* **`Config.java`:** `webroot` is renamed to `webRoot`.&#10;&#10;* **`WebRootHandler.java`:**  `getFileMimeType` now correctly determines MIME types.  `getFileByteArrayData` added to read file contents as a byte array.  `CheckIfEndsWithSlash` renamed to `checkIfEndsWithSlash`.  `webRoot` is now initialized within the constructor.&#10;&#10;* **`WebRootHandlerTest.java`:** New tests added for `getFileMimeType` and `getFileByteArrayData`.&#10;&#10;* **`HttpServer.java`:** Uses `config.getWebRoot()`.&#10;&#10;* **`ReadFileException.java`:**  New exception class for file reading errors.&#10;&#10;&#10;**Next Steps and Considerations:**&#10;&#10;* **Large File Handling:** The current `getFileByteArrayData` implementation reads the entire file into memory. For large files, this can lead to performance issues or even crashes.  Refactor to use streaming (e.g., `FileInputStream` directly in the response) to avoid loading the whole file at once.  This will improve memory efficiency and scalability.&#10;&#10;* **Caching:** Implement caching for frequently accessed files to reduce disk I/O and improve response times.&#10;&#10;* **Security:**  While the existing code prevents directory traversal, consider additional security measures (e.g., input validation, protection against other exploits).&#10;&#10;* **HTTP Method Handling:** The code currently doesn't differentiate between HTTP methods (GET, POST, etc.). Implement proper handling of different methods.&#10;&#10;* **More Comprehensive Testing:** Add more tests to cover different file types, error scenarios (e.g., file permissions), and edge cases.&#10;&#10;&#10;This revised code delivers a more functional and robust HTTP server, capable of serving static content with proper MIME type handling.  Addressing the next steps, especially large file handling, will make the server more efficient and scalable.">
      <change beforePath="$PROJECT_DIR$/src/main/java/com/cit306/EventSite/http/HttpParser.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/cit306/EventSite/http/HttpParser.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="JUnit5 Test Class" />
        <option value="Enum" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="PREVIOUS_COMMIT_AUTHORS">
      <list>
        <option value="Prince Obiuto &lt;152011741+prince-obiuto@users.noreply.github.com&gt;" />
      </list>
    </option>
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="master" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="UPDATE_TYPE" value="REBASE" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;Prince-Obiuto&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/Prince-Obiuto/EventSite.git&quot;,
    &quot;accountId&quot;: &quot;84382897-38d6-4eb0-b640-06fd38883bfc&quot;
  }
}</component>
  <component name="MaliciousPackageCheckinHandlerState">
    <option name="packageCheck" value="true" />
  </component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 2
}</component>
  <component name="ProjectId" id="2oWwXKU1Czc4zs5cvb7sd9lt396" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Application.HttpServer.executor": "Run",
    "JUnit.All Tests.executor": "Run",
    "JUnit.HTTPHeaderParserTest.executor": "Run",
    "JUnit.HTTPHeaderParserTest.testSimpleSingleHeader.executor": "Debug",
    "JUnit.HTTPVersionTest.executor": "Run",
    "JUnit.HTTPVersionTest.getBestCompatibleVersionExactMatch.executor": "Debug",
    "JUnit.HttpParserTest.executor": "Run",
    "JUnit.HttpParserTest.parseHTTPRequest.executor": "Debug",
    "JUnit.HttpParserTest.parseHTTPRequestBadMethod.executor": "Debug",
    "JUnit.HttpParserTest.parseHTTPRequestBadMethod1.executor": "Run",
    "JUnit.HttpParserTest.parseHTTPRequestLineCRnoLF.executor": "Run",
    "JUnit.WebRootHandlerTest.constructorBadPath.executor": "Debug",
    "JUnit.WebRootHandlerTest.executor": "Run",
    "JUnit.WebRootHandlerTest.testGetFileMimeTypeDefault.executor": "Debug",
    "JUnit.WebRootHandlerTest.testGetFileMimeTypePng.executor": "Debug",
    "Maven.EventSite [clean].executor": "Run",
    "Maven.EventSite [org.apache.maven.plugins:maven-clean-plugin:3.2.0:clean].executor": "Run",
    "Maven.EventSite [org.apache.maven.plugins:maven-install-plugin:3.1.2:install].executor": "Run",
    "Maven.EventSite [verify].executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.git.unshallow": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary": "JUnit5",
    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5": "",
    "git-widget-placeholder": "master",
    "ignore.virus.scanning.warn.message": "true",
    "kotlin-language-version-configured": "true",
    "last_opened_file_path": "C:/Users/HP/Desktop/Java Projects/EventSite/WebRoot",
    "settings.editor.selected.configurable": "com.android.studio.ml.bot.mainConfigurable"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CreateClassDialog.RecentsKey">
      <recent name="com.cit306.EventSite.httpserver.core.io" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\HP\Desktop\Java Projects\EventSite\WebRoot" />
    </key>
    <key name="CreateTestDialog.Recents.Supers">
      <recent name="" />
    </key>
    <key name="CreateTestDialog.RecentsKey">
      <recent name="com.cit306.EventSite.http" />
    </key>
  </component>
  <component name="RunDashboard">
    <option name="configurationTypes">
      <set>
        <option value="MavenRunConfiguration" />
      </set>
    </option>
  </component>
  <component name="RunManager" selected="Application.HttpServer">
    <configuration name="HttpServer" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="com.cit306.EventSite.HttpServer" />
      <module name="EventSite" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.cit306.EventSite.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="All Tests" type="JUnit" factoryName="JUnit">
      <module name="EventSite" />
      <option name="PACKAGE_NAME" value="" />
      <option name="MAIN_CLASS_NAME" value="" />
      <option name="METHOD_NAME" value="" />
      <option name="TEST_OBJECT" value="package" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="wholeProject" />
      </option>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="HTTPHeaderParserTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="EventSite" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.cit306.EventSite.http.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="com.cit306.EventSite.http" />
      <option name="MAIN_CLASS_NAME" value="com.cit306.EventSite.http.HTTPHeaderParserTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="HTTPVersionTest" type="JUnit" factoryName="JUnit" nameIsGenerated="true">
      <module name="EventSite" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.cit306.EventSite.http.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="com.cit306.EventSite.http" />
      <option name="MAIN_CLASS_NAME" value="com.cit306.EventSite.http.HTTPVersionTest" />
      <option name="METHOD_NAME" value="" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="HttpParserTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="EventSite" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.cit306.EventSite.http.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="com.cit306.EventSite.http" />
      <option name="MAIN_CLASS_NAME" value="com.cit306.EventSite.http.HttpParserTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="HttpParserTest.parseHTTPRequestLineCRnoLF" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="EventSite" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.cit306.EventSite.http.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="com.cit306.EventSite.http" />
      <option name="MAIN_CLASS_NAME" value="com.cit306.EventSite.http.HttpParserTest" />
      <option name="METHOD_NAME" value="parseHTTPRequestLineCRnoLF" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="WebRootHandlerTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="EventSite" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.cit306.EventSite.httpserver.core.io.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="com.cit306.EventSite.httpserver.core.io" />
      <option name="MAIN_CLASS_NAME" value="com.cit306.EventSite.httpserver.core.io.WebRootHandlerTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Application.HttpServer" />
      <item itemvalue="JUnit.All Tests" />
      <item itemvalue="JUnit.HTTPVersionTest" />
      <item itemvalue="JUnit.WebRootHandlerTest" />
      <item itemvalue="JUnit.HTTPHeaderParserTest" />
      <item itemvalue="JUnit.HttpParserTest" />
      <item itemvalue="JUnit.HttpParserTest.parseHTTPRequestLineCRnoLF" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Application.HttpServer" />
        <item itemvalue="JUnit.WebRootHandlerTest" />
        <item itemvalue="JUnit.HttpParserTest" />
        <item itemvalue="JUnit.HTTPHeaderParserTest" />
        <item itemvalue="JUnit.HttpParserTest.parseHTTPRequestLineCRnoLF" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="71e1af24-cec7-4b54-8077-805738bb3606" name="Changes" comment="" />
      <created>1730998686867</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1730998686867</updated>
    </task>
    <task id="LOCAL-00001" summary="Added files">
      <option name="closed" value="true" />
      <created>1731955272926</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1731955272926</updated>
    </task>
    <task id="LOCAL-00002" summary="Added files">
      <option name="closed" value="true" />
      <created>1732060158810</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1732060158810</updated>
    </task>
    <task id="LOCAL-00003" summary="Added files">
      <option name="closed" value="true" />
      <created>1732062297835</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1732062297835</updated>
    </task>
    <task id="LOCAL-00004" summary="Refactor HTTPRequest and add HTTP error handling&#10;&#10;Converted HTTPMethod to enum and updated HTTPRequest to use it. Added HTTPParsingException and HTTPStatusCodes for error management. Enhanced HttpParser with additional parsing logic and constants.">
      <option name="closed" value="true" />
      <created>1732064856924</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1732064856924</updated>
    </task>
    <task id="LOCAL-00005" summary="Refactor HTTPRequest and add HTTP error handling&#10;&#10;Converted HTTPMethod to enum and updated HTTPRequest to use it. Added HTTPParsingException and HTTPStatusCodes for error management. Enhanced HttpParser with additional parsing logic and constants.">
      <option name="closed" value="true" />
      <created>1732393134467</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1732393134467</updated>
    </task>
    <task id="LOCAL-00006" summary="Updated HttpParserTest with more extensive testing scenarios.&#10;Refactored HTTPMethod&#10;Added more functionalities to HttpParser.&#10;Made the HTTPParsingException to better catch and throw errors with better logging">
      <option name="closed" value="true" />
      <created>1732643748004</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1732643748004</updated>
    </task>
    <task id="LOCAL-00007" summary="This code update significantly improves the HTTP request parsing process, focusing on robustness, error handling, and HTTP version compatibility. Here's a breakdown of the changes:&#10;&#10;**Key Improvements:**&#10;&#10;* **HTTP Version Handling:** The code now supports parsing and validating HTTP versions. It correctly identifies the HTTP version from the request and checks for compatibility.  A new `HTTPVersion` enum and a `BadHTTPVersionException` are introduced for managing versioning.  The `HTTPRequest` object now stores both the original HTTP version string and the best compatible `HTTPVersion`.&#10;* **Enhanced Error Handling:**  Error handling is more precise and informative. The `HTTPParsingException` is used more effectively, and specific HTTP status codes (400, 505) are returned for bad requests, unsupported HTTP versions, and other parsing errors. This makes debugging easier.&#10;* **Improved Request Target Handling:** The request target is now explicitly parsed and validated, preventing potential issues with null or empty targets.&#10;* **Thorough Testing:**  The unit tests in `HttpParserTest` are expanded to cover various scenarios including bad HTTP versions, unsupported versions, and requests with only CR (no LF). This thorough testing ensures the parser's resilience.&#10;* **Code Cleanup:** Minor improvements like removing unnecessary comments and slightly clarifying the HTML response message in `HTTPConnectionWorkerThread` contribute to better code readability.  The removal of the commented-out `serverSocket.close()` in `ServerListenerThread` suggests a potential future improvement for graceful shutdown handling.&#10;&#10;**Specific Changes:**&#10;&#10;* **`HTTPRequest.java`:**  Added fields for original and best-compatible HTTP versions. Added getters and a setter for HTTP version. Added error handling for null/empty request targets.&#10;* **`HttpParser.java`:**  Improved parsing logic for HTTP versions and request targets.  Handles `BadHTTPVersionException` and throws `HTTPParsingException` with appropriate status codes.&#10;* **`HttpParserTest.java`:** Added more tests to cover various error conditions and HTTP version scenarios.&#10;* **`HTTPStatusCodes.java`:**  Added a status code for unsupported HTTP versions (505).&#10;* **`BadHTTPVersionException.java`:** New exception specifically for handling malformed HTTP version strings.&#10;* **`HTTPVersion.java`:** New enum to represent supported HTTP versions and provides a method to determine the best compatible version.&#10;* **`HTTPVersionTest.java`:** New test class to ensure correct functionality of HTTP version parsing.&#10;* **`ServerListenerThread.java` and `HTTPConnectionWorkerThread.java`:**  Minor code cleanup.&#10;&#10;&#10;This update represents a significant step forward in terms of code quality, reliability, and adherence to HTTP standards. The improved error handling and version compatibility make the parser much more robust, and the enhanced tests provide greater confidence in its correctness.">
      <option name="closed" value="true" />
      <created>1732883427282</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1732883427282</updated>
    </task>
    <task id="LOCAL-00008" summary="This diff introduces significant improvements to the HTTP request parsing process, enhancing its robustness, error handling, and HTTP version compatibility.  It also adds the ability to parse HTTP headers. The key changes are:&#10;&#10;* **HTTP Version Handling:** The code now parses and validates HTTP versions, storing both the original string and the best compatible version.  This is managed with a new `HTTPVersion` enum and `BadHTTPVersionException`.&#10;* **Enhanced Error Handling:** More precise error handling with `HTTPParsingException` and specific status codes (400, 505) improves debugging.&#10;* **Improved Request Target Handling:** Explicit parsing and validation of the request target prevents issues with null or empty targets.&#10;* **HTTP Header Parsing:**  The `HttpParser` can now parse HTTP header fields, storing them in a `HashMap` within the `HTTPRequest` object.  A new test class, `HTTPHeaderParserTest`, verifies this functionality.&#10;* **Thorough Testing:** Expanded unit tests in `HttpParserTest` cover various scenarios, including bad/unsupported HTTP versions and requests with only CR.&#10;* **Code Cleanup:** Minor cleanup, such as removing unnecessary comments, improves readability.&#10;&#10;&#10;Specific changes in the files:&#10;&#10;* **.idea/workspace.xml:** Reflects the changes in the project, including new files and updated run configurations. Notably, it now includes `HTTPHeaderParserTest` in the test runs.&#10;* **HTTPRequest.java:**  Adds fields for original and best-compatible HTTP versions, along with corresponding getters and a setter. It also includes error handling for null/empty request targets and a `HashMap` to store header fields.  New methods provide access to the headers.&#10;* **HttpParser.java:** Improves parsing logic for HTTP versions and request targets. Handles `BadHTTPVersionException` and throws `HTTPParsingException` with appropriate status codes.  The most significant change is the addition of the `parseHeaders` method and its helper, `processSingleHeaderField`, to extract header information from the request.&#10;* **HttpParserTest.java:** Includes additional tests for various error conditions and HTTP version scenarios.&#10;* **HTTPHeaderParserTest.java:** This *new* class specifically tests the header parsing capabilities of the `HttpParser`, ensuring correct extraction of header fields and values.&#10;&#10;&#10;This commit represents a significant improvement in the quality, reliability, and HTTP standards adherence of the code. The robust error handling, version compatibility, and header parsing make the parser much more capable.  The expanded tests give increased confidence in its correctness.">
      <option name="closed" value="true" />
      <created>1735135378069</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1735135378069</updated>
    </task>
    <task id="LOCAL-00009" summary="This diff introduces several changes related to serving static files from a webroot directory:&#10;&#10;1. **Package Restructuring:** The `HTTPConnectionWorkerThread` and `ServerListenerThread` classes have been moved from the `com.cit306.EventSite.httpserver.Call` package to the `com.cit306.EventSite.httpserver.core` package. This suggests a reorganization for better code structure.&#10;&#10;2. **Webroot Configuration:** The `http.json` configuration file now specifies an absolute path for the webroot: `&quot;C:\\Users\\HP\\Desktop\\Java Projects\\EventSite\\WebRoot&quot;`. This makes the webroot location explicit.&#10;&#10;3. **WebRoot Handling:**&#10;   - A new `WebRootHandler` class has been added to manage serving files from the specified webroot. It handles checking if a given relative path exists within the webroot and prevents directory traversal attempts.&#10;   - A `WebRootNotFoundException` is thrown if the configured webroot directory is invalid.&#10;   - It also has a placeholder for `getFileMimeType` to determine the MIME type of requested files, although the provided implementation always defaults to &quot;index.html&quot; and then throws `FileNotFoundException`. This needs further implementation to handle various file types correctly.&#10;&#10;4. **WebRoot Files:**  New files `index.html` and `favicon.ico` have been added to the `WebRoot` directory. This provides default content to be served. The `index.html` file contains a basic HTML structure with placeholders for content, including image placeholders.&#10;&#10;5. **Tests for WebRootHandler:** A new test class, `WebRootHandlerTest`, has been created to test the functionality of the `WebRootHandler`. The tests cover constructor behavior with valid and invalid webroot paths, and methods for checking path existence and trailing slashes.&#10;&#10;6. **HttpServer Changes:** The `HttpServer` class has likely been modified to use the new `WebRootHandler` (the diff for this class is not included, so the exact changes are unknown).&#10;&#10;7. **HTTPHeaderParserTest Changes:** The `HTTPHeaderParserTest` class now has an added test method which tests for the scenario when there is a space in header between the header key name and the colon, e.g.  `Host : localhost:8080`.&#10;&#10;&#10;**Key Improvements and Considerations:**&#10;&#10;* **Security:** The `WebRootHandler` attempts to prevent directory traversal attacks, which is crucial for security.&#10;* **Configuration:** Externalizing the webroot path to `http.json` makes it easier to change without recompiling.&#10;* **Testability:** The `WebRootHandlerTest` class improves the testability of the webroot handling logic.&#10;* **Incomplete MIME Type Handling:** The `getFileMimeType` method is incomplete and needs to be implemented properly to determine correct MIME types for various files (e.g., `.html`, `.css`, `.js`, `.png`, etc.).  The current defaulting to &quot;index.html&quot; is not correct behavior and neither is always throwing exceptions.&#10;* **Missing HttpServer Diff:** Without the diff for `HttpServer.java`, it's unclear how the `WebRootHandler` is integrated into the server's request handling process.  This makes it hard to fully assess its impact&#10;&#10;&#10;This diff represents a good step towards serving static content, but the MIME type handling needs to be completed for a fully functional solution. Providing the diff for `HttpServer.java` would give a more complete picture of the changes.">
      <option name="closed" value="true" />
      <created>1735299789626</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1735299789626</updated>
    </task>
    <task id="LOCAL-00010" summary="This diff introduces substantial improvements to file handling and response generation in your HTTP server.  It shifts from a hardcoded HTML page to serving files from a webroot directory and implements proper MIME type handling. The webroot is now relative to the project directory for portability.  Error handling is also more robust.  Let's break down the changes:&#10;&#10;**Key Changes:**&#10;&#10;* **Relative Webroot:** The most significant change is using a *relative* webroot path (&quot;WebRoot&quot;) instead of an absolute path. This makes your server portable and avoids hardcoding file system dependencies. The server now looks for the &quot;WebRoot&quot; directory within its execution context.&#10;&#10;* **Dynamic Content Serving:** The server now dynamically serves files from the webroot directory. The hardcoded HTML in `HTTPConnectionWorkerThread` is replaced with logic to read and serve requested files.  This allows you to host various file types (HTML, images, etc.). A default &quot;index.html&quot; is served if the request targets a directory.&#10;&#10;* **Robust MIME Type Handling:**  `WebRootHandler.getFileMimeType` now correctly determines the MIME type of requested files using `URLConnection.getFileNameMap()`. It defaults to &quot;application/octet-stream&quot; for unknown file types, which is standard practice.  This ensures browsers interpret the content correctly.&#10;&#10;* **Binary File Serving:** The `WebRootHandler` can now read and serve binary files.  `getFileByteArrayData` reads file contents into a byte array, suitable for sending binary data in HTTP responses.  This enables serving images, PDFs, and other non-text files. Note: this current implementation reads the entire file into memory, which isn't ideal for very large files.  Consider streaming for better memory management in the future.&#10;&#10;* **Improved Error Handling:**  A new `ReadFileException` is introduced to specifically handle errors encountered during file reading.  This provides better granularity than generic exceptions.  `HTTPConnectionWorkerThread` now catches and handles `FileNotFoundException` and `ReadFileException`, sending appropriate 404 responses.&#10;&#10;* **Status Code Consistency:** `HTTPConnectionWorkerThread` now consistently uses `HTTPStatusCodes` constants for HTTP status codes, making the code more readable and maintainable.&#10;&#10;* **Code Cleanup:**  Changes like making `myObjectMapper` `final` in `Json.java` and renaming methods and fields (e.g., `webroot` to `webRoot` for consistency) improve code style and readability.  The `checkifEndsWithSlash` method in `WebRootHandler` is renamed to `checkIfEndsWithSlash` for standard Java naming conventions.  `http.json` is simplified by removing unnecessary escaping of backslashes and now also uses `webRoot`.&#10;&#10;&#10;&#10;**Detailed File Changes and Improvements:**&#10;&#10;* **`HTTPConnectionWorkerThread.java`:**  Now dynamically builds HTTP responses based on the requested file. Handles `FileNotFoundException` and `ReadFileException` to send 404 errors. Uses `HTTPStatusCodes` for status codes.  Sends `Content-Type` header based on the determined MIME type. Sends binary data when appropriate.&#10;&#10;* **`ServerListenerThread.java`:** Minor changes to pass the webroot path.&#10;&#10;* **`HTTPStatusCodes.java`:**  A new success code `SERVER_SUCCESS_200_OK` is added, promoting better code readability.&#10;&#10;* **`http.json`:** Uses relative path &quot;WebRoot&quot;.&#10;&#10;* **`workspace.xml`:**  Reflects project changes and added a Run Configuration to execute the `HttpServer` class.&#10;&#10;* **`Json.java`:**  `myObjectMapper` is now `final`.&#10;&#10;* **`Config.java`:** `webroot` is renamed to `webRoot`.&#10;&#10;* **`WebRootHandler.java`:**  `getFileMimeType` now correctly determines MIME types.  `getFileByteArrayData` added to read file contents as a byte array.  `CheckIfEndsWithSlash` renamed to `checkIfEndsWithSlash`.  `webRoot` is now initialized within the constructor.&#10;&#10;* **`WebRootHandlerTest.java`:** New tests added for `getFileMimeType` and `getFileByteArrayData`.&#10;&#10;* **`HttpServer.java`:** Uses `config.getWebRoot()`.&#10;&#10;* **`ReadFileException.java`:**  New exception class for file reading errors.&#10;&#10;&#10;**Next Steps and Considerations:**&#10;&#10;* **Large File Handling:** The current `getFileByteArrayData` implementation reads the entire file into memory. For large files, this can lead to performance issues or even crashes.  Refactor to use streaming (e.g., `FileInputStream` directly in the response) to avoid loading the whole file at once.  This will improve memory efficiency and scalability.&#10;&#10;* **Caching:** Implement caching for frequently accessed files to reduce disk I/O and improve response times.&#10;&#10;* **Security:**  While the existing code prevents directory traversal, consider additional security measures (e.g., input validation, protection against other exploits).&#10;&#10;* **HTTP Method Handling:** The code currently doesn't differentiate between HTTP methods (GET, POST, etc.). Implement proper handling of different methods.&#10;&#10;* **More Comprehensive Testing:** Add more tests to cover different file types, error scenarios (e.g., file permissions), and edge cases.&#10;&#10;&#10;This revised code delivers a more functional and robust HTTP server, capable of serving static content with proper MIME type handling.  Addressing the next steps, especially large file handling, will make the server more efficient and scalable.">
      <option name="closed" value="true" />
      <created>1735321642229</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1735321642244</updated>
    </task>
    <option name="localTasksCounter" value="11" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT" value="true" />
    <MESSAGE value="Added files" />
    <MESSAGE value="Refactor HTTPRequest setMethod to handle invalid methods.&#10;&#10;Updated HTTPRequest#setMethod to throw HTTPParsingException for unsupported HTTP methods. Added corresponding test cases in HttpParserTest to ensure proper error handling and verification for valid and invalid methods. Enhanced HttpParser to manage these exceptions." />
    <MESSAGE value="Refactor HTTPRequest and add HTTP error handling&#10;&#10;Converted HTTPMethod to enum and updated HTTPRequest to use it. Added HTTPParsingException and HTTPStatusCodes for error management. Enhanced HttpParser with additional parsing logic and constants." />
    <MESSAGE value="Updated HttpParserTest with more extensive testing scenarios.&#10;Refactored HTTPMethod&#10;Added more functionalities to HttpParser.&#10;Made the HTTPParsingException to better catch and throw errors with better logging" />
    <MESSAGE value="This code update significantly improves the HTTP request parsing process, focusing on robustness, error handling, and HTTP version compatibility. Here's a breakdown of the changes:&#10;&#10;**Key Improvements:**&#10;&#10;* **HTTP Version Handling:** The code now supports parsing and validating HTTP versions. It correctly identifies the HTTP version from the request and checks for compatibility.  A new `HTTPVersion` enum and a `BadHTTPVersionException` are introduced for managing versioning.  The `HTTPRequest` object now stores both the original HTTP version string and the best compatible `HTTPVersion`.&#10;* **Enhanced Error Handling:**  Error handling is more precise and informative. The `HTTPParsingException` is used more effectively, and specific HTTP status codes (400, 505) are returned for bad requests, unsupported HTTP versions, and other parsing errors. This makes debugging easier.&#10;* **Improved Request Target Handling:** The request target is now explicitly parsed and validated, preventing potential issues with null or empty targets.&#10;* **Thorough Testing:**  The unit tests in `HttpParserTest` are expanded to cover various scenarios including bad HTTP versions, unsupported versions, and requests with only CR (no LF). This thorough testing ensures the parser's resilience.&#10;* **Code Cleanup:** Minor improvements like removing unnecessary comments and slightly clarifying the HTML response message in `HTTPConnectionWorkerThread` contribute to better code readability.  The removal of the commented-out `serverSocket.close()` in `ServerListenerThread` suggests a potential future improvement for graceful shutdown handling.&#10;&#10;**Specific Changes:**&#10;&#10;* **`HTTPRequest.java`:**  Added fields for original and best-compatible HTTP versions. Added getters and a setter for HTTP version. Added error handling for null/empty request targets.&#10;* **`HttpParser.java`:**  Improved parsing logic for HTTP versions and request targets.  Handles `BadHTTPVersionException` and throws `HTTPParsingException` with appropriate status codes.&#10;* **`HttpParserTest.java`:** Added more tests to cover various error conditions and HTTP version scenarios.&#10;* **`HTTPStatusCodes.java`:**  Added a status code for unsupported HTTP versions (505).&#10;* **`BadHTTPVersionException.java`:** New exception specifically for handling malformed HTTP version strings.&#10;* **`HTTPVersion.java`:** New enum to represent supported HTTP versions and provides a method to determine the best compatible version.&#10;* **`HTTPVersionTest.java`:** New test class to ensure correct functionality of HTTP version parsing.&#10;* **`ServerListenerThread.java` and `HTTPConnectionWorkerThread.java`:**  Minor code cleanup.&#10;&#10;&#10;This update represents a significant step forward in terms of code quality, reliability, and adherence to HTTP standards. The improved error handling and version compatibility make the parser much more robust, and the enhanced tests provide greater confidence in its correctness." />
    <MESSAGE value="This diff introduces significant improvements to the HTTP request parsing process, enhancing its robustness, error handling, and HTTP version compatibility.  It also adds the ability to parse HTTP headers. The key changes are:&#10;&#10;* **HTTP Version Handling:** The code now parses and validates HTTP versions, storing both the original string and the best compatible version.  This is managed with a new `HTTPVersion` enum and `BadHTTPVersionException`.&#10;* **Enhanced Error Handling:** More precise error handling with `HTTPParsingException` and specific status codes (400, 505) improves debugging.&#10;* **Improved Request Target Handling:** Explicit parsing and validation of the request target prevents issues with null or empty targets.&#10;* **HTTP Header Parsing:**  The `HttpParser` can now parse HTTP header fields, storing them in a `HashMap` within the `HTTPRequest` object.  A new test class, `HTTPHeaderParserTest`, verifies this functionality.&#10;* **Thorough Testing:** Expanded unit tests in `HttpParserTest` cover various scenarios, including bad/unsupported HTTP versions and requests with only CR.&#10;* **Code Cleanup:** Minor cleanup, such as removing unnecessary comments, improves readability.&#10;&#10;&#10;Specific changes in the files:&#10;&#10;* **.idea/workspace.xml:** Reflects the changes in the project, including new files and updated run configurations. Notably, it now includes `HTTPHeaderParserTest` in the test runs.&#10;* **HTTPRequest.java:**  Adds fields for original and best-compatible HTTP versions, along with corresponding getters and a setter. It also includes error handling for null/empty request targets and a `HashMap` to store header fields.  New methods provide access to the headers.&#10;* **HttpParser.java:** Improves parsing logic for HTTP versions and request targets. Handles `BadHTTPVersionException` and throws `HTTPParsingException` with appropriate status codes.  The most significant change is the addition of the `parseHeaders` method and its helper, `processSingleHeaderField`, to extract header information from the request.&#10;* **HttpParserTest.java:** Includes additional tests for various error conditions and HTTP version scenarios.&#10;* **HTTPHeaderParserTest.java:** This *new* class specifically tests the header parsing capabilities of the `HttpParser`, ensuring correct extraction of header fields and values.&#10;&#10;&#10;This commit represents a significant improvement in the quality, reliability, and HTTP standards adherence of the code. The robust error handling, version compatibility, and header parsing make the parser much more capable.  The expanded tests give increased confidence in its correctness." />
    <MESSAGE value="This diff introduces several changes related to serving static files from a webroot directory:&#10;&#10;1. **Package Restructuring:** The `HTTPConnectionWorkerThread` and `ServerListenerThread` classes have been moved from the `com.cit306.EventSite.httpserver.Call` package to the `com.cit306.EventSite.httpserver.core` package. This suggests a reorganization for better code structure.&#10;&#10;2. **Webroot Configuration:** The `http.json` configuration file now specifies an absolute path for the webroot: `&quot;C:\\Users\\HP\\Desktop\\Java Projects\\EventSite\\WebRoot&quot;`. This makes the webroot location explicit.&#10;&#10;3. **WebRoot Handling:**&#10;   - A new `WebRootHandler` class has been added to manage serving files from the specified webroot. It handles checking if a given relative path exists within the webroot and prevents directory traversal attempts.&#10;   - A `WebRootNotFoundException` is thrown if the configured webroot directory is invalid.&#10;   - It also has a placeholder for `getFileMimeType` to determine the MIME type of requested files, although the provided implementation always defaults to &quot;index.html&quot; and then throws `FileNotFoundException`. This needs further implementation to handle various file types correctly.&#10;&#10;4. **WebRoot Files:**  New files `index.html` and `favicon.ico` have been added to the `WebRoot` directory. This provides default content to be served. The `index.html` file contains a basic HTML structure with placeholders for content, including image placeholders.&#10;&#10;5. **Tests for WebRootHandler:** A new test class, `WebRootHandlerTest`, has been created to test the functionality of the `WebRootHandler`. The tests cover constructor behavior with valid and invalid webroot paths, and methods for checking path existence and trailing slashes.&#10;&#10;6. **HttpServer Changes:** The `HttpServer` class has likely been modified to use the new `WebRootHandler` (the diff for this class is not included, so the exact changes are unknown).&#10;&#10;7. **HTTPHeaderParserTest Changes:** The `HTTPHeaderParserTest` class now has an added test method which tests for the scenario when there is a space in header between the header key name and the colon, e.g.  `Host : localhost:8080`.&#10;&#10;&#10;**Key Improvements and Considerations:**&#10;&#10;* **Security:** The `WebRootHandler` attempts to prevent directory traversal attacks, which is crucial for security.&#10;* **Configuration:** Externalizing the webroot path to `http.json` makes it easier to change without recompiling.&#10;* **Testability:** The `WebRootHandlerTest` class improves the testability of the webroot handling logic.&#10;* **Incomplete MIME Type Handling:** The `getFileMimeType` method is incomplete and needs to be implemented properly to determine correct MIME types for various files (e.g., `.html`, `.css`, `.js`, `.png`, etc.).  The current defaulting to &quot;index.html&quot; is not correct behavior and neither is always throwing exceptions.&#10;* **Missing HttpServer Diff:** Without the diff for `HttpServer.java`, it's unclear how the `WebRootHandler` is integrated into the server's request handling process.  This makes it hard to fully assess its impact&#10;&#10;&#10;This diff represents a good step towards serving static content, but the MIME type handling needs to be completed for a fully functional solution. Providing the diff for `HttpServer.java` would give a more complete picture of the changes." />
    <MESSAGE value="This diff introduces substantial improvements to file handling and response generation in your HTTP server.  It shifts from a hardcoded HTML page to serving files from a webroot directory and implements proper MIME type handling. The webroot is now relative to the project directory for portability.  Error handling is also more robust.  Let's break down the changes:&#10;&#10;**Key Changes:**&#10;&#10;* **Relative Webroot:** The most significant change is using a *relative* webroot path (&quot;WebRoot&quot;) instead of an absolute path. This makes your server portable and avoids hardcoding file system dependencies. The server now looks for the &quot;WebRoot&quot; directory within its execution context.&#10;&#10;* **Dynamic Content Serving:** The server now dynamically serves files from the webroot directory. The hardcoded HTML in `HTTPConnectionWorkerThread` is replaced with logic to read and serve requested files.  This allows you to host various file types (HTML, images, etc.). A default &quot;index.html&quot; is served if the request targets a directory.&#10;&#10;* **Robust MIME Type Handling:**  `WebRootHandler.getFileMimeType` now correctly determines the MIME type of requested files using `URLConnection.getFileNameMap()`. It defaults to &quot;application/octet-stream&quot; for unknown file types, which is standard practice.  This ensures browsers interpret the content correctly.&#10;&#10;* **Binary File Serving:** The `WebRootHandler` can now read and serve binary files.  `getFileByteArrayData` reads file contents into a byte array, suitable for sending binary data in HTTP responses.  This enables serving images, PDFs, and other non-text files. Note: this current implementation reads the entire file into memory, which isn't ideal for very large files.  Consider streaming for better memory management in the future.&#10;&#10;* **Improved Error Handling:**  A new `ReadFileException` is introduced to specifically handle errors encountered during file reading.  This provides better granularity than generic exceptions.  `HTTPConnectionWorkerThread` now catches and handles `FileNotFoundException` and `ReadFileException`, sending appropriate 404 responses.&#10;&#10;* **Status Code Consistency:** `HTTPConnectionWorkerThread` now consistently uses `HTTPStatusCodes` constants for HTTP status codes, making the code more readable and maintainable.&#10;&#10;* **Code Cleanup:**  Changes like making `myObjectMapper` `final` in `Json.java` and renaming methods and fields (e.g., `webroot` to `webRoot` for consistency) improve code style and readability.  The `checkifEndsWithSlash` method in `WebRootHandler` is renamed to `checkIfEndsWithSlash` for standard Java naming conventions.  `http.json` is simplified by removing unnecessary escaping of backslashes and now also uses `webRoot`.&#10;&#10;&#10;&#10;**Detailed File Changes and Improvements:**&#10;&#10;* **`HTTPConnectionWorkerThread.java`:**  Now dynamically builds HTTP responses based on the requested file. Handles `FileNotFoundException` and `ReadFileException` to send 404 errors. Uses `HTTPStatusCodes` for status codes.  Sends `Content-Type` header based on the determined MIME type. Sends binary data when appropriate.&#10;&#10;* **`ServerListenerThread.java`:** Minor changes to pass the webroot path.&#10;&#10;* **`HTTPStatusCodes.java`:**  A new success code `SERVER_SUCCESS_200_OK` is added, promoting better code readability.&#10;&#10;* **`http.json`:** Uses relative path &quot;WebRoot&quot;.&#10;&#10;* **`workspace.xml`:**  Reflects project changes and added a Run Configuration to execute the `HttpServer` class.&#10;&#10;* **`Json.java`:**  `myObjectMapper` is now `final`.&#10;&#10;* **`Config.java`:** `webroot` is renamed to `webRoot`.&#10;&#10;* **`WebRootHandler.java`:**  `getFileMimeType` now correctly determines MIME types.  `getFileByteArrayData` added to read file contents as a byte array.  `CheckIfEndsWithSlash` renamed to `checkIfEndsWithSlash`.  `webRoot` is now initialized within the constructor.&#10;&#10;* **`WebRootHandlerTest.java`:** New tests added for `getFileMimeType` and `getFileByteArrayData`.&#10;&#10;* **`HttpServer.java`:** Uses `config.getWebRoot()`.&#10;&#10;* **`ReadFileException.java`:**  New exception class for file reading errors.&#10;&#10;&#10;**Next Steps and Considerations:**&#10;&#10;* **Large File Handling:** The current `getFileByteArrayData` implementation reads the entire file into memory. For large files, this can lead to performance issues or even crashes.  Refactor to use streaming (e.g., `FileInputStream` directly in the response) to avoid loading the whole file at once.  This will improve memory efficiency and scalability.&#10;&#10;* **Caching:** Implement caching for frequently accessed files to reduce disk I/O and improve response times.&#10;&#10;* **Security:**  While the existing code prevents directory traversal, consider additional security measures (e.g., input validation, protection against other exploits).&#10;&#10;* **HTTP Method Handling:** The code currently doesn't differentiate between HTTP methods (GET, POST, etc.). Implement proper handling of different methods.&#10;&#10;* **More Comprehensive Testing:** Add more tests to cover different file types, error scenarios (e.g., file permissions), and edge cases.&#10;&#10;&#10;This revised code delivers a more functional and robust HTTP server, capable of serving static content with proper MIME type handling.  Addressing the next steps, especially large file handling, will make the server more efficient and scalable." />
    <option name="LAST_COMMIT_MESSAGE" value="This diff introduces substantial improvements to file handling and response generation in your HTTP server.  It shifts from a hardcoded HTML page to serving files from a webroot directory and implements proper MIME type handling. The webroot is now relative to the project directory for portability.  Error handling is also more robust.  Let's break down the changes:&#10;&#10;**Key Changes:**&#10;&#10;* **Relative Webroot:** The most significant change is using a *relative* webroot path (&quot;WebRoot&quot;) instead of an absolute path. This makes your server portable and avoids hardcoding file system dependencies. The server now looks for the &quot;WebRoot&quot; directory within its execution context.&#10;&#10;* **Dynamic Content Serving:** The server now dynamically serves files from the webroot directory. The hardcoded HTML in `HTTPConnectionWorkerThread` is replaced with logic to read and serve requested files.  This allows you to host various file types (HTML, images, etc.). A default &quot;index.html&quot; is served if the request targets a directory.&#10;&#10;* **Robust MIME Type Handling:**  `WebRootHandler.getFileMimeType` now correctly determines the MIME type of requested files using `URLConnection.getFileNameMap()`. It defaults to &quot;application/octet-stream&quot; for unknown file types, which is standard practice.  This ensures browsers interpret the content correctly.&#10;&#10;* **Binary File Serving:** The `WebRootHandler` can now read and serve binary files.  `getFileByteArrayData` reads file contents into a byte array, suitable for sending binary data in HTTP responses.  This enables serving images, PDFs, and other non-text files. Note: this current implementation reads the entire file into memory, which isn't ideal for very large files.  Consider streaming for better memory management in the future.&#10;&#10;* **Improved Error Handling:**  A new `ReadFileException` is introduced to specifically handle errors encountered during file reading.  This provides better granularity than generic exceptions.  `HTTPConnectionWorkerThread` now catches and handles `FileNotFoundException` and `ReadFileException`, sending appropriate 404 responses.&#10;&#10;* **Status Code Consistency:** `HTTPConnectionWorkerThread` now consistently uses `HTTPStatusCodes` constants for HTTP status codes, making the code more readable and maintainable.&#10;&#10;* **Code Cleanup:**  Changes like making `myObjectMapper` `final` in `Json.java` and renaming methods and fields (e.g., `webroot` to `webRoot` for consistency) improve code style and readability.  The `checkifEndsWithSlash` method in `WebRootHandler` is renamed to `checkIfEndsWithSlash` for standard Java naming conventions.  `http.json` is simplified by removing unnecessary escaping of backslashes and now also uses `webRoot`.&#10;&#10;&#10;&#10;**Detailed File Changes and Improvements:**&#10;&#10;* **`HTTPConnectionWorkerThread.java`:**  Now dynamically builds HTTP responses based on the requested file. Handles `FileNotFoundException` and `ReadFileException` to send 404 errors. Uses `HTTPStatusCodes` for status codes.  Sends `Content-Type` header based on the determined MIME type. Sends binary data when appropriate.&#10;&#10;* **`ServerListenerThread.java`:** Minor changes to pass the webroot path.&#10;&#10;* **`HTTPStatusCodes.java`:**  A new success code `SERVER_SUCCESS_200_OK` is added, promoting better code readability.&#10;&#10;* **`http.json`:** Uses relative path &quot;WebRoot&quot;.&#10;&#10;* **`workspace.xml`:**  Reflects project changes and added a Run Configuration to execute the `HttpServer` class.&#10;&#10;* **`Json.java`:**  `myObjectMapper` is now `final`.&#10;&#10;* **`Config.java`:** `webroot` is renamed to `webRoot`.&#10;&#10;* **`WebRootHandler.java`:**  `getFileMimeType` now correctly determines MIME types.  `getFileByteArrayData` added to read file contents as a byte array.  `CheckIfEndsWithSlash` renamed to `checkIfEndsWithSlash`.  `webRoot` is now initialized within the constructor.&#10;&#10;* **`WebRootHandlerTest.java`:** New tests added for `getFileMimeType` and `getFileByteArrayData`.&#10;&#10;* **`HttpServer.java`:** Uses `config.getWebRoot()`.&#10;&#10;* **`ReadFileException.java`:**  New exception class for file reading errors.&#10;&#10;&#10;**Next Steps and Considerations:**&#10;&#10;* **Large File Handling:** The current `getFileByteArrayData` implementation reads the entire file into memory. For large files, this can lead to performance issues or even crashes.  Refactor to use streaming (e.g., `FileInputStream` directly in the response) to avoid loading the whole file at once.  This will improve memory efficiency and scalability.&#10;&#10;* **Caching:** Implement caching for frequently accessed files to reduce disk I/O and improve response times.&#10;&#10;* **Security:**  While the existing code prevents directory traversal, consider additional security measures (e.g., input validation, protection against other exploits).&#10;&#10;* **HTTP Method Handling:** The code currently doesn't differentiate between HTTP methods (GET, POST, etc.). Implement proper handling of different methods.&#10;&#10;* **More Comprehensive Testing:** Add more tests to cover different file types, error scenarios (e.g., file permissions), and edge cases.&#10;&#10;&#10;This revised code delivers a more functional and robust HTTP server, capable of serving static content with proper MIME type handling.  Addressing the next steps, especially large file handling, will make the server more efficient and scalable." />
  </component>
  <component name="com.intellij.coverage.CoverageDataManagerImpl">
    <SUITE FILE_PATH="coverage/EventSite$HttpParserTest_parseHTTPRequestBadMethod1.ic" NAME="HttpParserTest.parseHTTPRequestBadMethod1 Coverage Results" MODIFIED="1732392657632" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="true">
      <FILTER>com.cit306.EventSite.http.*</FILTER>
    </SUITE>
  </component>
</project>